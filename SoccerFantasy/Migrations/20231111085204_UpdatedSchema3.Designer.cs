// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoccerFantasy.Models;

#nullable disable

namespace SoccerFantasy.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231111085204_UpdatedSchema3")]
    partial class UpdatedSchema3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("SoccerFantasy.Models.FantasyLeague", b =>
                {
                    b.Property<Guid>("fantasyLeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("fantasyLeagueCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("fantasyLeagueId");

                    b.ToTable("fantasyLeagues");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyTeam", b =>
                {
                    b.Property<Guid>("fantasyTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("current_round_points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("totalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("fantasyTeamId");

                    b.HasIndex("userId");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyTeamLeague", b =>
                {
                    b.Property<Guid>("FantasyTeamLeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("fantasyLeagueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fantasyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FantasyTeamLeagueId");

                    b.HasIndex("fantasyLeagueId");

                    b.HasIndex("fantasyTeamId");

                    b.ToTable("fantasyTeamLeagues");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Goal", b =>
                {
                    b.Property<Guid>("goalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("goalAssisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("goalScorerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("matchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("minute")
                        .HasColumnType("INTEGER");

                    b.HasKey("goalId");

                    b.HasIndex("goalAssisterId");

                    b.HasIndex("goalScorerId");

                    b.HasIndex("matchId");

                    b.ToTable("goals");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Match", b =>
                {
                    b.Property<Guid>("matchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("awayPossesion")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte>("awayScore")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<Guid>("awayTeamNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("awayTeamNamename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("awayTotalShots")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<byte>("homePossesion")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte>("homeScore")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<Guid>("homeTeamNameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("homeTeamNamename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("homeTotalShots")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.HasKey("matchId");

                    b.HasIndex("awayTeamNamename");

                    b.HasIndex("homeTeamNamename");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Player", b =>
                {
                    b.Property<Guid>("playerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("age")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("appearances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cleanSheets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("fantasy_round_points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("goals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nationCSS")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nationURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("playerImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("team")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("teamRefname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("playerId");

                    b.HasIndex("teamRefname");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Team", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("clubLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("gamesDraw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("gamesLost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("gamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("gamesWon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("goalDiff")
                        .HasColumnType("INTEGER");

                    b.Property<int>("points")
                        .HasColumnType("INTEGER");

                    b.HasKey("name");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("SoccerFantasy.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("currentRoundPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("totalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("user_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyTeam", b =>
                {
                    b.HasOne("SoccerFantasy.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyTeamLeague", b =>
                {
                    b.HasOne("SoccerFantasy.Models.FantasyLeague", "FantasyLeague")
                        .WithMany("FantasyTeamLeagues")
                        .HasForeignKey("fantasyLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoccerFantasy.Models.FantasyTeam", "FantasyTeam")
                        .WithMany("FantasyTeamLeagues")
                        .HasForeignKey("fantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyLeague");

                    b.Navigation("FantasyTeam");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Goal", b =>
                {
                    b.HasOne("SoccerFantasy.Models.Player", "goalAssister")
                        .WithMany()
                        .HasForeignKey("goalAssisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoccerFantasy.Models.Player", "goalScorer")
                        .WithMany()
                        .HasForeignKey("goalScorerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoccerFantasy.Models.Match", "match")
                        .WithMany()
                        .HasForeignKey("matchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("goalAssister");

                    b.Navigation("goalScorer");

                    b.Navigation("match");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Match", b =>
                {
                    b.HasOne("SoccerFantasy.Models.Team", "awayTeamName")
                        .WithMany()
                        .HasForeignKey("awayTeamNamename")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoccerFantasy.Models.Team", "homeTeamName")
                        .WithMany()
                        .HasForeignKey("homeTeamNamename")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("awayTeamName");

                    b.Navigation("homeTeamName");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Player", b =>
                {
                    b.HasOne("SoccerFantasy.Models.Team", "teamRef")
                        .WithMany("players")
                        .HasForeignKey("teamRefname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teamRef");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyLeague", b =>
                {
                    b.Navigation("FantasyTeamLeagues");
                });

            modelBuilder.Entity("SoccerFantasy.Models.FantasyTeam", b =>
                {
                    b.Navigation("FantasyTeamLeagues");
                });

            modelBuilder.Entity("SoccerFantasy.Models.Team", b =>
                {
                    b.Navigation("players");
                });
#pragma warning restore 612, 618
        }
    }
}
